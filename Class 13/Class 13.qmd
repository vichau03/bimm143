---
title: "Class 13"
author: "Vivian Chau (A16913056)"
format: pdf
---

```{r}
#Loading up the packages that we will use today: "DESeq2"

#/ message: false
library("DESeq2")
```

Today we will analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014). 

## Import count DData and colData

There are two datasets I need to import/read 

- `countData` the transcript counts per gene (rows) in the different experiments 
- `colData` information about the colums (i.e experiments) in `countData`

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

We can have a peak at these with `head()`

```{r}
head(counts)
```

```{r}
head(metadata)
```

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have?

```{r}
table(metadata$dex)
```

```{r}
## Another way to find 'control' cell lines

sum(metadata$dex=="control")
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean values for "treated" experiments. 

Step 1: Extract all "control" experiments (columns) from the `counts` data
```{r}
control <- metadata$dex =="control"
control.counts <- counts[ , control]
head(control.counts)
```

```{r}
dim(control.counts)
```

Step 2: Find the mean value for each gene in these columns (mean value of each gene) 

```{r}
control.mean <- rowSums(control.counts)/ncol(control.counts)
head(control.mean)
```

Step 3: Extract all "treated" experiments (columns) from the `counts` data
```{r}
treated <- metadata$dex =="treated"
treated.counts <- counts[ , treated]
head(treated.counts)
```
> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

Step 4: Find the mean value for each gene in these columns (mean value of each gene)
```{r}
treated.mean <- rowSums(treated.counts)/ncol(treated.counts)
head(treated.mean)
```

Let's put these two mean values together for easy book-keeping 

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```
> Q5a. Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.


Let's have a look - plot control.mean vs treated.mean
```{r}
plot(meancounts)
```

> Q5b. You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?
geom_point

```{r}
## Plotting with ggplot

library(ggplot2)

ggplot(meancounts)+
  aes(control.mean,treated.mean)+
  geom_point(alpha=0.3)
```

Whenever we see data that is so heavily skewed like this we often log transform it so we can see what is going on more easily. 

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?
log

```{r}
plot(meancounts, log="xy")
```

We most often work in log2 units as this makes the math easier. Let's play with this. 
```{r}
# Treated/Control
log2(20/20)
```

```{r}
log2(40/20)
```

```{r}
log2(80/20)
```

```{r}
log2(20/40)
```

We can now add "log2 fold-change" values to our `meancounts` dataset. 

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/
                            meancounts$control.mean)
head(meancounts)
```

We need to filter out zero count genes - i.e remove the rows(genes) that have a 0 value in either control or treated means. 

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?
The arr.ind is important for telling us which rows/columns have zero counts. 

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```


How many genes are "up" regulated at the common log2 fold change threshold of +2?

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
up.inds <- mycounts$log2fc > 2
sum(up.inds, na.rm =T)
```

> Q9.Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

How many genes are "down" regulated at the common log2 fold change threshold of -2? 
```{r}
down.inds <- mycounts$log2fc < -2
sum(down.inds, na.rm = T)
```

> Q10. Do you trust these results? Why or why not?
We do not trust these results because there is no indication if these differences are significant. 

## DESeq2 Analysis

To do this the right way we need to consider the significance of the differences not just their magnitude.

To use this package it wants countData and colData in a specific format. 

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata,
                       design = ~dex)
```
```{r}
dds <- DESeq(dds)
```

Extract my results:
```{r}
res <- results(dds)
head(res)
```

Plot of fold-change vs. p-value (adjusted for multiple testing)
```{r}
plot(res$log2FoldChange, res$padj)
```

Take the log of the p-value
```{r}
plot(res$log2FoldChange, log(res$padj))
```

We can just flip that y-axis by putting a minus sign on it
```{r}
plot(res$log2FoldChange, -log(res$padj),
     xlab="Log2 Fold-change",
     ylab="-log(P-value)")
```

Let's save our work to date. 

```{r}
write.csv(res, file = "myresults.csv")
```

To finish off let's make a nicer volcano plot.
- Add the log2 threshold lines at +2/-2
- Add P-value threshold lines at 0.05 
- Add color to highlight the subset of genes that meet both of the above thresholds 

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange >=2] <- "lightblue"
mycols[res$log2FoldChange <= -2] <- "lightblue"
mycols[res$padj > 0.05] <- "grey"
```

```{r}
ggplot(res)+
  aes(log2FoldChange,-log(padj))+
  geom_point(col=mycols)+
  geom_vline(xintercept = c(-2,2), col="pink", size = 1)+
  geom_hline(yintercept = 0.05, col="pink", size=1)
```


