---
title: R functions
author: Vivian Chau (A16913056)
format: pdf
---

Today we will get more exposure to functions in R. We call functions to do all our work and today we will learn how to write our own.

## A first silly function

Note that arguments 2 and 3 have default values because we set y=0 and z=0) so we don't have to supply them when we call our function.

```{r}
add <-function(x,y=0,z=0){
  x+y+z
  }
```

Can I just use this 
```{r}
add(1,1)
add(1, c(10,100))
```

```{r}
add(100)
```

```{r}
add(100,10,1)
```

## A second more fun function

Let's write a function that generates random nucleotide sequences.

We can make use of the in-built `sample()` function in R to help us here.

```{r}
sample(1:10, size=9)
```

```{r}
sample(1:10, size=11, replace=TRUE)
```

> Q. Can you use `sample()` to generate a random nucleotide sequence of length 5.

```{r}
sample(x=c("A","T","C","G"),size=5,replace=TRUE)
```

> Q. Write a function `generate_dna()` that makes a nucleotide sequence of a use specified length.

Every function in R has at least 3 things:

- a **name** (in our case "generate_dna") 
- one or more **input arguments** (the "length" of sequence we want)
- a **body** (R code that does the work)

```{r}
generate_dna <- function(length) {
  bases <- c("A","T","C","G")
  sample(bases, size=length, replace=TRUE)
  }
```

```{r}
generate_dna(10)
```

> Q. Can you write a `generate protein()` function that returns amino acid sequence of a user requested length?

```{r}
generate_protein <- function (length=5) {
  aa<-bio3d::aa.table$aa1[1:20]
  sample(aa, size=length, replace=TRUE)
}

```

```{r}
generate_protein(10)
```

I want my output of this function not to be a vector with one amino acid per element but rather a one element single string.

```{r}
bases<-c("A","G","C","T")
paste(bases, collapse="")


```

```{r}
generate_protein <- function (length=5) {
  aa<-bio3d::aa.table$aa1[1:20]
  s<-sample(aa, size=length, replace=TRUE)
  paste(s,collapse="")
}
```

```{r}
generate_protein()
```

> Q. Generate protein sequences from lenght 6 to 12?

```{r}
generate_protein(length=6)
generate_protein(length=7)
generate_protein(length=8)
```

We can use the useful utility function `sapply()` to help us "apply" our function over all the values 6 to 12.

```{r}
ans<-sapply(6:12, generate_protein)
ans
```

```{r}
cat( paste(">ID.", 6:12, sep="","\n", ans,"\n"), sep="" )
```

> Q. Are any of these sequences unique in nature - i.e. never found in nature. We can search "refseq-protein" and look for 100% Ide and 100% coverage matches with BLASTp

Yes. ID. 6 has 100% identity and coverage match with an uncharacterized protein from Bolinopsis microptera.ID. 7 has 100% identity and coverage match with glutamate synthase large subunit. ID. 9 has 100% identity and coverage match with CPBP family intramembrane glutamic endopeptidase.ID. 8, ID.10, ID.11, and ID.12 has no 100% identity and coverage matches.

>Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]


```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)

mean(student1)
```
Identify the lowest score:
```{r}
#Which element of the vector is the lowest?
which.min(student1)
```

```{r}
#This will return everything but the element that is the lowest for Student 1
student1[-which.min(student1)]
```

```{r}
x<-student2
x[is.na(x)]<-0
x
```

```{r}
#This is the mean for student 2, not including their lowest score
x[is.na(x)]<-0
mean(x[-which.min(x)])
```

```{r}
#This is the mean for student 3, not including their lowest score
student3<-c(90, NA, NA, NA, NA, NA, NA, NA)
x<-student3
x[is.na(x)]<-0
mean(x[-which.min(x)])
```

```{r}
grade<-function(x){
  x[is.na(x)]<-0
  mean(x[-which.min(x)])
  }
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

```{r}
#Calculate the average score for a vector of student scores dropping the lowest score, where missing values will be treated as zero


student<-c(100, NA,90,97)
grade(student)

grade<-function(x){
  #Treat missing values as zero
  x[is.na(x)]<-0
  #Exclude lowest score from mean
  mean(x[-which.min(x)])
  }
```

```{r}
url<-"https://tinyurl.com/gradeinput"
gradebook<-read.csv(url,row.names=1)
```


>Q2.Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]

```{r}
results<-apply(gradebook,1,grade)
sort(results,decreasing=TRUE)
```
```{r}
#This is the top scoring student overall in the gradebook.
which.max(results)
```

>Q3.From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall? [2pts]

```{r}
avg.scores<-apply(gradebook,2,mean,na.rm=TRUE)
avg.scores
which.min(avg.scores)
```

```{r}
boxplot(gradebook)
```

>A. HW 2 was toughest on students.

>Q4.Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
masked.gradebook<-gradebook
masked.gradebook[is.na(masked.gradebook)]<-0
masked.gradebook
```

```{r}
cor(results,masked.gradebook$hw5)
```

```{r}
apply(masked.gradebook,2,cor,x=results)
```
>A. HW5 was most predictive of overall score.

>Q5.Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]