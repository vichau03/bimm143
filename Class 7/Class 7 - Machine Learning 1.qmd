---
title: "Class 7 - Machine Learning 1"
author: "Vivian Chau (A16913056)"
format: pdf
---


#First up kmeans()

Demo od using kmeans() function in base R. First make up some data with a known structure. 

```{r}
tmp<-c(rnorm(30,-3), rnorm(30,3))
x <- cbind(x=tmp,y=rev(tmp))
plot(x)
```

Now we have some made up data in `x`. Let's see how kmeans works with this data

```{r}
k <- kmeans(x,centers=2,nstart=20)
k
```

>Q. How many points are in each cluster? 

```{r}
k$size
```

>Q. How do we get to the cluster membership/assignment?

```{r}
k$cluster
```

>Q. What about cluster centers?

```{r}
k$centers
```

Now we got to the main results, let's use them to plot our data with the kmeans result.

```{r}
plot(x, col =k$cluster)
points(k$centers, col="blue",pch=15)
```

## Now for Hierarchical Clustering

We will cluster the same data `x` with the `hclust()`. In this case `hclust()` requires a distance matrix as an output.

```{r}
hc<-hclust(dist(x))
hc
```

Let's plot our hclust result

```{r}
plot(hc)
```

To get our clutster membership vector we need to "cut" the tree with the `cutree()`

```{r}
grps<-cutree(hc,h=8)
grps
```

Now we can plot our data with the hclust() results.

```{r}
plot(x, col=grps)
```

# Prinicpal Component Analysis (PCA)

## PCA of UK food dat 

We will read data from the class website and then try a few visualizations.

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url,row.names=1)
x
```

>Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?
There are 17 rows and 4 columns in this data frame.

```{r}
nrow(x)
ncol(x)
```
>Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?
Using the row.names=1 is prefered because it is easier to use and properly starts the rows where desired. 

```{r}
cols<-rainbow(nrow(x))
barplot(as.matrix(x),col=cols, beside=TRUE)
```
>Q3: Changing what optional argument in the above barplot() function results in the following plot?
Changing the beside=TRUE to beside=false results in the following plot. 

```{r}
cols<-rainbow(nrow(x))
barplot(as.matrix(x),col=cols, beside=FALSE)
```

>Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?
The following plots allow for the comparison of different food categories consumed between two countries. If a given point lies on the diagonal for a given plot, this means that people in a particular country ate the same amount of the specific food category as the people in the other country being compared to.

```{r}
pairs(x,col=cols,pch=16)
```

>Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?
N. Ireland appears to be the most different from the other countries, as many of the dots skew away from the diagonal line. In this case, the food category represented by the blue dot is consumed more in the other countries than N. Ireland. 

PCA to the rescue! 
The main base R PCA function is called `prcomp()`and we will need to give it the transpose of our input data.

```{r}
pca<-prcomp(t(x))
summary(pca)
```

```{r}
attributes(pca)
```
To make our new PCA plot (a.k.a. PCA score plot) we access `pca$x`

```{r}
head(pca$x)
```

>Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

Let's plot our main results:

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500), ylim=c(-300,300))
text(pca$x[,1], pca$x[,2], colnames(x))
```

>Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
country_cols<-c("orange","red","blue","green")
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500), ylim=c(-300,300))
text(pca$x[,1], pca$x[,2], colnames(x),col=country_cols)
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v
```

```{r}
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")
```

Digging deeper (variable loadings)

```{r}
## Lets focus on PC1 as it accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )

```

>Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?
Fresh potatatoes has a large negative score while soft drinks has a high positive loading score. PC2 mainly tells us about the second most important differentce within the data, that differs from the primary trend. 

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```

Using ggplot for these figures:

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)
df_lab <- tibble::rownames_to_column(df, "Country")

# Our first basic plot
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country) + 
  geom_point()
```

To make this graph look nicer: 

```{r}
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country, label=Country) + 
  geom_hline(yintercept = 0, col="gray") +
  geom_vline(xintercept = 0, col="gray") +
  geom_point(show.legend = FALSE) +
  geom_label(hjust=1, nudge_x = -10, show.legend = FALSE) +
  expand_limits(x = c(-300,500)) +
  xlab("PC1 (67.4%)") +
  ylab("PC2 (28%)") +
  theme_bw()
```

PCA of RNA-seq data: 

Reading data from class website 

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

>Q10: How many genes and samples are in this data set?
There are 10 samples and 100 genes in this data set.

```{r}
nrow(rna.data)
ncol(rna.data)
```

```{r}
## Again we have to take the transpose of our data 
pca<-prcomp(t(rna.data),scale=TRUE)
```

```{r}
## Here's a simple plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```

A quick barplot summary of this Proportion of Variance

```{r}
plot(pca, main="Quick scree plot")
```

We can calculate how much variation in the original data each PC accounts for: 

```{r}
## Variance captured per PC 
pca.var <- pca$sdev^2

## Percent variance is often more informative to look at 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

And we can generate our own scree-plot like:

```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```

